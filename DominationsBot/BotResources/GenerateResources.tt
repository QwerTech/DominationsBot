<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Runtime.Remoting.Messaging" #> 

<#
	string targetNamespace= (string)CallContext.LogicalGetData("NamespaceHint");
   
#>
// This is the output code from your template
// you only get syntax-highlighting here - not intellisense
using System.Drawing;
using System.IO;
using System;
namespace <#=targetNamespace.Substring(0, targetNamespace.LastIndexOf(".")) #>{
<#OutputResourceFolder(Host.ResolvePath(""),new DirectoryInfo(Host.ResolvePath("")).Name);#>
}
<#+

	private void	OutputResourceFolder(string folderPath, string folderName, string upClassName = null)
	{
		var files = Directory.GetFiles(folderPath,"*.png",SearchOption.TopDirectoryOnly);
		#>


	public static class <#=folderName#>
	{
		public static string ThisPath = Path.Combine(<#=upClassName==null?"Settings.BasePath": upClassName+".ThisPath"#>, @"<#=folderName#>");
		<#+
		foreach(var file in files)
		{
			var fileInfo =new FileInfo(file);
			var fileName =Path.GetFileNameWithoutExtension(fileInfo.Name);
			#>
	
		public static string Path<#=fileName#> => Path.Combine( ThisPath, @"<#=fileInfo.Name#>");
		private static readonly Lazy<Bitmap> Bmp<#=fileName#>Lazy = new Lazy<Bitmap>(()=> new Bitmap(Path<#=fileName#>));
		public static Bitmap Bmp<#=fileName#> => Bmp<#=fileName#>Lazy.Value;
	 
			<#+	
		}
		var subDirs = Directory.GetDirectories(folderPath,"*",SearchOption.TopDirectoryOnly);
		foreach(var dir in subDirs)
		{
			var dirInfo = new DirectoryInfo(dir);
			OutputResourceFolder(dir, dirInfo.Name, folderName);
		}#>
	}
		<#+
    }
#>